unit UFigur;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls;

// wird benoetigt, um eine zweidimensionale Array als Rückgabetyp einer
// Funktion zu verwenden
type
  // [Moeglichkeitsnummer (eine Figur hat maximal 64 moegliche Zuege)][fields2D[X]][fields2D[Y]]
  // eigentlich wird ja in Dimension 2 und 3 nur 1..8 benoetigt, aber ich ver-
  // wende [?][0][0] um das Ende der moeglichen Zuege zu markieren, da ein Springer
  // beispielsweise nur 8 moegliche Zuege hat und dann wird [9][0][0] gespeichert
  TZweiDimensionaleArray = array[1..64] of array[1..2] of Integer;

type
  TFigur = class
  protected
    istWeiss : boolean;
    legaleZuege : TDreiDimensionaleArray;
    aktuelleKoordinateX : integer; // gibt die Koordinate X der aktuellen Position in der fields2D Array zurück
    aktuelleKoordinateY : integer; // gibt die Koordinate Y der aktuellen Position in der fields2D Array zurück
    procedure ZuegeBerechnen(); virtual;
  public
    function GetZuege() : TDreiDimensionaleArray;
    constructor Create(p_istWeiss : boolean; p_aktuelleKoordinateX, p_aktuelleKoordinateY : integer);
  end;

implementation

constructor TFigur.Create(p_istWeiss : boolean; p_aktuelleKoordinateX, p_aktuelleKoordinateY : integer);
begin

  istWeiss := p_istWeiss;
  aktuelleKoordinateX := p_aktuelleKoordinateX;
  aktuelleKoordinateY := p_aktuelleKoordinateY;

end;

function TFigur.GetZuege() : TDreiDimensionaleArray;
begin
  ZuegeBerechnen();
  result := legaleZuege;
end;

procedure TFigur.ZuegeBerechnen();
begin

  // diese Form der Methode wird im regulaeren Programmbetrieb nicht aufgerufen,
  // da Methode in den jeweiligen Kindern ueberschrieben wird, aber ich haette sie
  // trotzdem gern hier, im Sinne der OOP

end;

end.

